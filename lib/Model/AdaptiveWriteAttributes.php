<?php
/**
 * AdaptiveWriteAttributes
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  criteo\api\marketingsolutions\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Criteo API
 *
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: Preview
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace criteo\api\marketingsolutions\preview\Model;

use \ArrayAccess;
use \criteo\api\marketingsolutions\preview\ObjectSerializer;

/**
 * AdaptiveWriteAttributes Class Doc Comment
 *
 * @category Class
 * @description The attributes specific to create or update an Adaptive creative
 * @package  criteo\api\marketingsolutions\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AdaptiveWriteAttributes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AdaptiveWriteAttributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'layouts' => 'string[]',
        'logo_base64_string' => 'string',
        'headline_text' => 'string',
        'headline_font' => 'string',
        'description_text' => 'string',
        'description_font' => 'string',
        'calls_to_action' => 'string[]',
        'colors' => '\criteo\api\marketingsolutions\preview\Model\AdaptiveColors',
        'image_sets_base64' => '\criteo\api\marketingsolutions\preview\Model\ImageSetBase64[]',
        'image_display' => 'string',
        'video_base64_strings' => 'string[]',
        'landing_page_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'layouts' => null,
        'logo_base64_string' => null,
        'headline_text' => null,
        'headline_font' => null,
        'description_text' => null,
        'description_font' => null,
        'calls_to_action' => null,
        'colors' => null,
        'image_sets_base64' => null,
        'image_display' => null,
        'video_base64_strings' => null,
        'landing_page_url' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'layouts' => 'layouts',
        'logo_base64_string' => 'logoBase64String',
        'headline_text' => 'headlineText',
        'headline_font' => 'headlineFont',
        'description_text' => 'descriptionText',
        'description_font' => 'descriptionFont',
        'calls_to_action' => 'callsToAction',
        'colors' => 'colors',
        'image_sets_base64' => 'imageSetsBase64',
        'image_display' => 'imageDisplay',
        'video_base64_strings' => 'videoBase64Strings',
        'landing_page_url' => 'landingPageUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'layouts' => 'setLayouts',
        'logo_base64_string' => 'setLogoBase64String',
        'headline_text' => 'setHeadlineText',
        'headline_font' => 'setHeadlineFont',
        'description_text' => 'setDescriptionText',
        'description_font' => 'setDescriptionFont',
        'calls_to_action' => 'setCallsToAction',
        'colors' => 'setColors',
        'image_sets_base64' => 'setImageSetsBase64',
        'image_display' => 'setImageDisplay',
        'video_base64_strings' => 'setVideoBase64Strings',
        'landing_page_url' => 'setLandingPageUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'layouts' => 'getLayouts',
        'logo_base64_string' => 'getLogoBase64String',
        'headline_text' => 'getHeadlineText',
        'headline_font' => 'getHeadlineFont',
        'description_text' => 'getDescriptionText',
        'description_font' => 'getDescriptionFont',
        'calls_to_action' => 'getCallsToAction',
        'colors' => 'getColors',
        'image_sets_base64' => 'getImageSetsBase64',
        'image_display' => 'getImageDisplay',
        'video_base64_strings' => 'getVideoBase64Strings',
        'landing_page_url' => 'getLandingPageUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['layouts'] = $data['layouts'] ?? null;
        $this->container['logo_base64_string'] = $data['logo_base64_string'] ?? null;
        $this->container['headline_text'] = $data['headline_text'] ?? null;
        $this->container['headline_font'] = $data['headline_font'] ?? null;
        $this->container['description_text'] = $data['description_text'] ?? null;
        $this->container['description_font'] = $data['description_font'] ?? null;
        $this->container['calls_to_action'] = $data['calls_to_action'] ?? null;
        $this->container['colors'] = $data['colors'] ?? null;
        $this->container['image_sets_base64'] = $data['image_sets_base64'] ?? null;
        $this->container['image_display'] = $data['image_display'] ?? null;
        $this->container['video_base64_strings'] = $data['video_base64_strings'] ?? null;
        $this->container['landing_page_url'] = $data['landing_page_url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['layouts'] === null) {
            $invalidProperties[] = "'layouts' can't be null";
        }
        if ($this->container['logo_base64_string'] === null) {
            $invalidProperties[] = "'logo_base64_string' can't be null";
        }
        if ($this->container['headline_text'] === null) {
            $invalidProperties[] = "'headline_text' can't be null";
        }
        if ($this->container['headline_font'] === null) {
            $invalidProperties[] = "'headline_font' can't be null";
        }
        if ($this->container['description_text'] === null) {
            $invalidProperties[] = "'description_text' can't be null";
        }
        if ($this->container['description_font'] === null) {
            $invalidProperties[] = "'description_font' can't be null";
        }
        if ($this->container['calls_to_action'] === null) {
            $invalidProperties[] = "'calls_to_action' can't be null";
        }
        if ($this->container['colors'] === null) {
            $invalidProperties[] = "'colors' can't be null";
        }
        if ($this->container['landing_page_url'] === null) {
            $invalidProperties[] = "'landing_page_url' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets layouts
     *
     * @return string[]
     */
    public function getLayouts()
    {
        return $this->container['layouts'];
    }

    /**
     * Sets layouts
     *
     * @param string[] $layouts The Adaptive layouts that are enabled.  It can contain any of the following values: \"Editorial\", “Montage“, \"InBannerVideo\".
     *
     * @return self
     */
    public function setLayouts($layouts)
    {


        $this->container['layouts'] = $layouts;

        return $this;
    }

    /**
     * Gets logo_base64_string
     *
     * @return string
     */
    public function getLogoBase64String()
    {
        return $this->container['logo_base64_string'];
    }

    /**
     * Sets logo_base64_string
     *
     * @param string $logo_base64_string Logo image as a base-64 encoded string
     *
     * @return self
     */
    public function setLogoBase64String($logo_base64_string)
    {
        $this->container['logo_base64_string'] = $logo_base64_string;

        return $this;
    }

    /**
     * Gets headline_text
     *
     * @return string
     */
    public function getHeadlineText()
    {
        return $this->container['headline_text'];
    }

    /**
     * Sets headline_text
     *
     * @param string $headline_text The headline text of the banner
     *
     * @return self
     */
    public function setHeadlineText($headline_text)
    {
        $this->container['headline_text'] = $headline_text;

        return $this;
    }

    /**
     * Gets headline_font
     *
     * @return string
     */
    public function getHeadlineFont()
    {
        return $this->container['headline_font'];
    }

    /**
     * Sets headline_font
     *
     * @param string $headline_font Font of the headline  Valid supported font like \"Arial\"
     *
     * @return self
     */
    public function setHeadlineFont($headline_font)
    {
        $this->container['headline_font'] = $headline_font;

        return $this;
    }

    /**
     * Gets description_text
     *
     * @return string
     */
    public function getDescriptionText()
    {
        return $this->container['description_text'];
    }

    /**
     * Sets description_text
     *
     * @param string $description_text The description text of the banner
     *
     * @return self
     */
    public function setDescriptionText($description_text)
    {
        $this->container['description_text'] = $description_text;

        return $this;
    }

    /**
     * Gets description_font
     *
     * @return string
     */
    public function getDescriptionFont()
    {
        return $this->container['description_font'];
    }

    /**
     * Sets description_font
     *
     * @param string $description_font Font of the description  Valid supported font like \"Arial\"
     *
     * @return self
     */
    public function setDescriptionFont($description_font)
    {
        $this->container['description_font'] = $description_font;

        return $this;
    }

    /**
     * Gets calls_to_action
     *
     * @return string[]
     */
    public function getCallsToAction()
    {
        return $this->container['calls_to_action'];
    }

    /**
     * Sets calls_to_action
     *
     * @param string[] $calls_to_action A Call-to-Action (CTA) is an action-driven instruction to your audience intended to provoke an immediate  response, such as “Buy now” or “Go!”.
     *
     * @return self
     */
    public function setCallsToAction($calls_to_action)
    {


        $this->container['calls_to_action'] = $calls_to_action;

        return $this;
    }

    /**
     * Gets colors
     *
     * @return \criteo\api\marketingsolutions\preview\Model\AdaptiveColors
     */
    public function getColors()
    {
        return $this->container['colors'];
    }

    /**
     * Sets colors
     *
     * @param \criteo\api\marketingsolutions\preview\Model\AdaptiveColors $colors colors
     *
     * @return self
     */
    public function setColors($colors)
    {
        $this->container['colors'] = $colors;

        return $this;
    }

    /**
     * Gets image_sets_base64
     *
     * @return \criteo\api\marketingsolutions\preview\Model\ImageSetBase64[]|null
     */
    public function getImageSetsBase64()
    {
        return $this->container['image_sets_base64'];
    }

    /**
     * Sets image_sets_base64
     *
     * @param \criteo\api\marketingsolutions\preview\Model\ImageSetBase64[]|null $image_sets_base64 Multiple image sets, each image set consists of multiple images as a base-64 encoded string and a headline text.
     *
     * @return self
     */
    public function setImageSetsBase64($image_sets_base64)
    {


        $this->container['image_sets_base64'] = $image_sets_base64;

        return $this;
    }

    /**
     * Gets image_display
     *
     * @return string|null
     */
    public function getImageDisplay()
    {
        return $this->container['image_display'];
    }

    /**
     * Sets image_display
     *
     * @param string|null $image_display Value can be \"ShowFullImage\" or \"ZoomOnImage\". Choose whether your image set should fit inside the allocated  space (\"ShowFullImage\") or whether it should fill that space (\"ZoomOnImage\"). If you choose ZoomOnImage, there may be some  image cropping.
     *
     * @return self
     */
    public function setImageDisplay($image_display)
    {
        $this->container['image_display'] = $image_display;

        return $this;
    }

    /**
     * Gets video_base64_strings
     *
     * @return string[]|null
     */
    public function getVideoBase64Strings()
    {
        return $this->container['video_base64_strings'];
    }

    /**
     * Sets video_base64_strings
     *
     * @param string[]|null $video_base64_strings Multiple videos potentially in different shapes, each video is a base-64 encoded string.
     *
     * @return self
     */
    public function setVideoBase64Strings($video_base64_strings)
    {


        $this->container['video_base64_strings'] = $video_base64_strings;

        return $this;
    }

    /**
     * Gets landing_page_url
     *
     * @return string
     */
    public function getLandingPageUrl()
    {
        return $this->container['landing_page_url'];
    }

    /**
     * Sets landing_page_url
     *
     * @param string $landing_page_url Web redirection of the landing page url.
     *
     * @return self
     */
    public function setLandingPageUrl($landing_page_url)
    {
        $this->container['landing_page_url'] = $landing_page_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


