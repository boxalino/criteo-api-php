<?php
/**
 * AudienceSegmentUpdateEntityV1
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  criteo\api\marketingsolutions\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Criteo API
 *
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: Preview
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace criteo\api\marketingsolutions\preview\Model;

use \ArrayAccess;
use \criteo\api\marketingsolutions\preview\ObjectSerializer;

/**
 * AudienceSegmentUpdateEntityV1 Class Doc Comment
 *
 * @category Class
 * @description Set of rules that defines specific people to target.
 * @package  criteo\api\marketingsolutions\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AudienceSegmentUpdateEntityV1 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AudienceSegmentUpdateEntityV1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'description' => '\criteo\api\marketingsolutions\preview\Model\NillableString',
        'commerce' => '\criteo\api\marketingsolutions\preview\Model\CommerceUpdateV1',
        'contact_list' => 'object',
        'location' => '\criteo\api\marketingsolutions\preview\Model\LocationUpdateV1',
        'retargeting' => '\criteo\api\marketingsolutions\preview\Model\RetargetingUpdateV1'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'description' => null,
        'commerce' => null,
        'contact_list' => null,
        'location' => null,
        'retargeting' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'commerce' => 'commerce',
        'contact_list' => 'contactList',
        'location' => 'location',
        'retargeting' => 'retargeting'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'commerce' => 'setCommerce',
        'contact_list' => 'setContactList',
        'location' => 'setLocation',
        'retargeting' => 'setRetargeting'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'commerce' => 'getCommerce',
        'contact_list' => 'getContactList',
        'location' => 'getLocation',
        'retargeting' => 'getRetargeting'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['commerce'] = $data['commerce'] ?? null;
        $this->container['contact_list'] = $data['contact_list'] ?? null;
        $this->container['location'] = $data['location'] ?? null;
        $this->container['retargeting'] = $data['retargeting'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \criteo\api\marketingsolutions\preview\Model\NillableString|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \criteo\api\marketingsolutions\preview\Model\NillableString|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets commerce
     *
     * @return \criteo\api\marketingsolutions\preview\Model\CommerceUpdateV1|null
     */
    public function getCommerce()
    {
        return $this->container['commerce'];
    }

    /**
     * Sets commerce
     *
     * @param \criteo\api\marketingsolutions\preview\Model\CommerceUpdateV1|null $commerce commerce
     *
     * @return self
     */
    public function setCommerce($commerce)
    {
        $this->container['commerce'] = $commerce;

        return $this;
    }

    /**
     * Gets contact_list
     *
     * @return object|null
     */
    public function getContactList()
    {
        return $this->container['contact_list'];
    }

    /**
     * Sets contact_list
     *
     * @param object|null $contact_list Settings to target users with your contact lists.
     *
     * @return self
     */
    public function setContactList($contact_list)
    {
        $this->container['contact_list'] = $contact_list;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \criteo\api\marketingsolutions\preview\Model\LocationUpdateV1|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \criteo\api\marketingsolutions\preview\Model\LocationUpdateV1|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets retargeting
     *
     * @return \criteo\api\marketingsolutions\preview\Model\RetargetingUpdateV1|null
     */
    public function getRetargeting()
    {
        return $this->container['retargeting'];
    }

    /**
     * Sets retargeting
     *
     * @param \criteo\api\marketingsolutions\preview\Model\RetargetingUpdateV1|null $retargeting retargeting
     *
     * @return self
     */
    public function setRetargeting($retargeting)
    {
        $this->container['retargeting'] = $retargeting;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


