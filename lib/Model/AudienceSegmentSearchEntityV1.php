<?php
/**
 * AudienceSegmentSearchEntityV1
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  criteo\api\marketingsolutions\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Criteo API
 *
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: Preview
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace criteo\api\marketingsolutions\preview\Model;

use \ArrayAccess;
use \criteo\api\marketingsolutions\preview\ObjectSerializer;

/**
 * AudienceSegmentSearchEntityV1 Class Doc Comment
 *
 * @category Class
 * @description Available filters to perform a search on audience segments. If present, the filters are AND&#39;ed together when applied.
 * @package  criteo\api\marketingsolutions\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AudienceSegmentSearchEntityV1 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AudienceSegmentSearchEntityV1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'audience_segment_ids' => 'string[]',
        'advertiser_ids' => 'string[]',
        'audience_segment_types' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'audience_segment_ids' => null,
        'advertiser_ids' => null,
        'audience_segment_types' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'audience_segment_ids' => 'audienceSegmentIds',
        'advertiser_ids' => 'advertiserIds',
        'audience_segment_types' => 'audienceSegmentTypes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'audience_segment_ids' => 'setAudienceSegmentIds',
        'advertiser_ids' => 'setAdvertiserIds',
        'audience_segment_types' => 'setAudienceSegmentTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'audience_segment_ids' => 'getAudienceSegmentIds',
        'advertiser_ids' => 'getAdvertiserIds',
        'audience_segment_types' => 'getAudienceSegmentTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const AUDIENCE_SEGMENT_TYPES_UNKNOWN = 'Unknown';
    const AUDIENCE_SEGMENT_TYPES_IN_MARKET = 'InMarket';
    const AUDIENCE_SEGMENT_TYPES_PROSPECTING = 'Prospecting';
    const AUDIENCE_SEGMENT_TYPES_CONTACT_LIST = 'ContactList';
    const AUDIENCE_SEGMENT_TYPES_LOCATION = 'Location';
    const AUDIENCE_SEGMENT_TYPES_BEHAVIORAL = 'Behavioral';
    const AUDIENCE_SEGMENT_TYPES_RETARGETING = 'Retargeting';
    const AUDIENCE_SEGMENT_TYPES_LOOKALIKE = 'Lookalike';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAudienceSegmentTypesAllowableValues()
    {
        return [
            self::AUDIENCE_SEGMENT_TYPES_UNKNOWN,
            self::AUDIENCE_SEGMENT_TYPES_IN_MARKET,
            self::AUDIENCE_SEGMENT_TYPES_PROSPECTING,
            self::AUDIENCE_SEGMENT_TYPES_CONTACT_LIST,
            self::AUDIENCE_SEGMENT_TYPES_LOCATION,
            self::AUDIENCE_SEGMENT_TYPES_BEHAVIORAL,
            self::AUDIENCE_SEGMENT_TYPES_RETARGETING,
            self::AUDIENCE_SEGMENT_TYPES_LOOKALIKE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['audience_segment_ids'] = $data['audience_segment_ids'] ?? null;
        $this->container['advertiser_ids'] = $data['advertiser_ids'] ?? null;
        $this->container['audience_segment_types'] = $data['audience_segment_types'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets audience_segment_ids
     *
     * @return string[]|null
     */
    public function getAudienceSegmentIds()
    {
        return $this->container['audience_segment_ids'];
    }

    /**
     * Sets audience_segment_ids
     *
     * @param string[]|null $audience_segment_ids List of segment ids
     *
     * @return self
     */
    public function setAudienceSegmentIds($audience_segment_ids)
    {


        $this->container['audience_segment_ids'] = $audience_segment_ids;

        return $this;
    }

    /**
     * Gets advertiser_ids
     *
     * @return string[]|null
     */
    public function getAdvertiserIds()
    {
        return $this->container['advertiser_ids'];
    }

    /**
     * Sets advertiser_ids
     *
     * @param string[]|null $advertiser_ids List of advertiser ids
     *
     * @return self
     */
    public function setAdvertiserIds($advertiser_ids)
    {


        $this->container['advertiser_ids'] = $advertiser_ids;

        return $this;
    }

    /**
     * Gets audience_segment_types
     *
     * @return string[]|null
     */
    public function getAudienceSegmentTypes()
    {
        return $this->container['audience_segment_types'];
    }

    /**
     * Sets audience_segment_types
     *
     * @param string[]|null $audience_segment_types List of segment types
     *
     * @return self
     */
    public function setAudienceSegmentTypes($audience_segment_types)
    {
        $allowedValues = $this->getAudienceSegmentTypesAllowableValues();
        if (!is_null($audience_segment_types) && array_diff($audience_segment_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'audience_segment_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }


        $this->container['audience_segment_types'] = $audience_segment_types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


