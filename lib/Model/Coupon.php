<?php
/**
 * Coupon
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  criteo\api\marketingsolutions\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Criteo API
 *
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: Preview
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace criteo\api\marketingsolutions\preview\Model;

use \ArrayAccess;
use \criteo\api\marketingsolutions\preview\ObjectSerializer;

/**
 * Coupon Class Doc Comment
 *
 * @category Class
 * @description Coupons are static images applied on ad set which can be displayed within an ad and link to a landing page.
 * @package  criteo\api\marketingsolutions\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Coupon implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Coupon';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'description' => 'string',
        'author' => 'string',
        'advertiser_id' => 'string',
        'ad_set_id' => 'string',
        'landing_page_url' => 'string',
        'start_date' => 'string',
        'end_date' => 'string',
        'format' => 'string',
        'status' => 'string',
        'images' => '\criteo\api\marketingsolutions\preview\Model\ImageSlide[]',
        'show_every' => 'int',
        'show_duration' => 'int',
        'rotations_number' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'description' => null,
        'author' => null,
        'advertiser_id' => null,
        'ad_set_id' => null,
        'landing_page_url' => null,
        'start_date' => null,
        'end_date' => null,
        'format' => null,
        'status' => null,
        'images' => null,
        'show_every' => 'int32',
        'show_duration' => 'int32',
        'rotations_number' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'author' => 'author',
        'advertiser_id' => 'advertiserId',
        'ad_set_id' => 'adSetId',
        'landing_page_url' => 'landingPageUrl',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'format' => 'format',
        'status' => 'status',
        'images' => 'images',
        'show_every' => 'showEvery',
        'show_duration' => 'showDuration',
        'rotations_number' => 'rotationsNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'author' => 'setAuthor',
        'advertiser_id' => 'setAdvertiserId',
        'ad_set_id' => 'setAdSetId',
        'landing_page_url' => 'setLandingPageUrl',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'format' => 'setFormat',
        'status' => 'setStatus',
        'images' => 'setImages',
        'show_every' => 'setShowEvery',
        'show_duration' => 'setShowDuration',
        'rotations_number' => 'setRotationsNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'author' => 'getAuthor',
        'advertiser_id' => 'getAdvertiserId',
        'ad_set_id' => 'getAdSetId',
        'landing_page_url' => 'getLandingPageUrl',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'format' => 'getFormat',
        'status' => 'getStatus',
        'images' => 'getImages',
        'show_every' => 'getShowEvery',
        'show_duration' => 'getShowDuration',
        'rotations_number' => 'getRotationsNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['author'] = $data['author'] ?? null;
        $this->container['advertiser_id'] = $data['advertiser_id'] ?? null;
        $this->container['ad_set_id'] = $data['ad_set_id'] ?? null;
        $this->container['landing_page_url'] = $data['landing_page_url'] ?? null;
        $this->container['start_date'] = $data['start_date'] ?? null;
        $this->container['end_date'] = $data['end_date'] ?? null;
        $this->container['format'] = $data['format'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['images'] = $data['images'] ?? null;
        $this->container['show_every'] = $data['show_every'] ?? null;
        $this->container['show_duration'] = $data['show_duration'] ?? null;
        $this->container['rotations_number'] = $data['rotations_number'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the Coupon
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of the Coupon
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets author
     *
     * @return string|null
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string|null $author The login of the person who created this Coupon
     *
     * @return self
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets advertiser_id
     *
     * @return string|null
     */
    public function getAdvertiserId()
    {
        return $this->container['advertiser_id'];
    }

    /**
     * Sets advertiser_id
     *
     * @param string|null $advertiser_id Advertiser linked to the Coupon
     *
     * @return self
     */
    public function setAdvertiserId($advertiser_id)
    {
        $this->container['advertiser_id'] = $advertiser_id;

        return $this;
    }

    /**
     * Gets ad_set_id
     *
     * @return string|null
     */
    public function getAdSetId()
    {
        return $this->container['ad_set_id'];
    }

    /**
     * Sets ad_set_id
     *
     * @param string|null $ad_set_id The id of the Ad Set on which the Coupon is applied to
     *
     * @return self
     */
    public function setAdSetId($ad_set_id)
    {
        $this->container['ad_set_id'] = $ad_set_id;

        return $this;
    }

    /**
     * Gets landing_page_url
     *
     * @return string|null
     */
    public function getLandingPageUrl()
    {
        return $this->container['landing_page_url'];
    }

    /**
     * Sets landing_page_url
     *
     * @param string|null $landing_page_url Web redirection of the landing page url
     *
     * @return self
     */
    public function setLandingPageUrl($landing_page_url)
    {
        $this->container['landing_page_url'] = $landing_page_url;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string|null $start_date The date when the Coupon will be launched  String must be in ISO8601 format
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string|null $end_date The date when when we will stop to show this Coupon. If the end date is not specified (i.e. null) then the Coupon will go on forever  String must be in ISO8601 format
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets format
     *
     * @return string|null
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string|null $format Format of the Coupon, it can have two values: \"FullFrame\" or \"LogoZone\"
     *
     * @return self
     */
    public function setFormat($format)
    {
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The status of the Coupon
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \criteo\api\marketingsolutions\preview\Model\ImageSlide[]|null
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \criteo\api\marketingsolutions\preview\Model\ImageSlide[]|null $images List of slides containing the image URLs
     *
     * @return self
     */
    public function setImages($images)
    {


        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets show_every
     *
     * @return int|null
     */
    public function getShowEvery()
    {
        return $this->container['show_every'];
    }

    /**
     * Sets show_every
     *
     * @param int|null $show_every Show the Coupon every N seconds (between 1 and 10)
     *
     * @return self
     */
    public function setShowEvery($show_every)
    {
        $this->container['show_every'] = $show_every;

        return $this;
    }

    /**
     * Gets show_duration
     *
     * @return int|null
     */
    public function getShowDuration()
    {
        return $this->container['show_duration'];
    }

    /**
     * Sets show_duration
     *
     * @param int|null $show_duration Show Coupon for a duration of N seconds (between 1 and 5)
     *
     * @return self
     */
    public function setShowDuration($show_duration)
    {
        $this->container['show_duration'] = $show_duration;

        return $this;
    }

    /**
     * Gets rotations_number
     *
     * @return int|null
     */
    public function getRotationsNumber()
    {
        return $this->container['rotations_number'];
    }

    /**
     * Sets rotations_number
     *
     * @param int|null $rotations_number Number of rotations for the Coupons (from 1 to 10 times)
     *
     * @return self
     */
    public function setRotationsNumber($rotations_number)
    {
        $this->container['rotations_number'] = $rotations_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


