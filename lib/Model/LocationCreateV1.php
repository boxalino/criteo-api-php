<?php
/**
 * LocationCreateV1
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  criteo\api\marketingsolutions\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Criteo API
 *
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: Preview
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace criteo\api\marketingsolutions\preview\Model;

use \ArrayAccess;
use \criteo\api\marketingsolutions\preview\ObjectSerializer;

/**
 * LocationCreateV1 Class Doc Comment
 *
 * @category Class
 * @description Settings to target users based on their location.
 * @package  criteo\api\marketingsolutions\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class LocationCreateV1 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LocationCreateV1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'registry_type' => 'string',
        'points_of_interest' => '\criteo\api\marketingsolutions\preview\Model\PointOfInterestV1[]',
        'geo_divisions' => '\criteo\api\marketingsolutions\preview\Model\GeoDivisionV1[]',
        'radius_in_km' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'registry_type' => null,
        'points_of_interest' => null,
        'geo_divisions' => null,
        'radius_in_km' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'registry_type' => 'registryType',
        'points_of_interest' => 'pointsOfInterest',
        'geo_divisions' => 'geoDivisions',
        'radius_in_km' => 'radiusInKm'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'registry_type' => 'setRegistryType',
        'points_of_interest' => 'setPointsOfInterest',
        'geo_divisions' => 'setGeoDivisions',
        'radius_in_km' => 'setRadiusInKm'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'registry_type' => 'getRegistryType',
        'points_of_interest' => 'getPointsOfInterest',
        'geo_divisions' => 'getGeoDivisions',
        'radius_in_km' => 'getRadiusInKm'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const REGISTRY_TYPE_CATALOG = 'Catalog';
    const REGISTRY_TYPE_STORE = 'Store';
    const REGISTRY_TYPE_POINT_OF_INTEREST = 'PointOfInterest';
    const REGISTRY_TYPE_GEO_DIVISION = 'GeoDivision';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRegistryTypeAllowableValues()
    {
        return [
            self::REGISTRY_TYPE_CATALOG,
            self::REGISTRY_TYPE_STORE,
            self::REGISTRY_TYPE_POINT_OF_INTEREST,
            self::REGISTRY_TYPE_GEO_DIVISION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['registry_type'] = $data['registry_type'] ?? null;
        $this->container['points_of_interest'] = $data['points_of_interest'] ?? null;
        $this->container['geo_divisions'] = $data['geo_divisions'] ?? null;
        $this->container['radius_in_km'] = $data['radius_in_km'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRegistryTypeAllowableValues();
        if (!is_null($this->container['registry_type']) && !in_array($this->container['registry_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'registry_type', must be one of '%s'",
                $this->container['registry_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets registry_type
     *
     * @return string|null
     */
    public function getRegistryType()
    {
        return $this->container['registry_type'];
    }

    /**
     * Sets registry_type
     *
     * @param string|null $registry_type registry_type
     *
     * @return self
     */
    public function setRegistryType($registry_type)
    {
        $allowedValues = $this->getRegistryTypeAllowableValues();
        if (!is_null($registry_type) && !in_array($registry_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'registry_type', must be one of '%s'",
                    $registry_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['registry_type'] = $registry_type;

        return $this;
    }

    /**
     * Gets points_of_interest
     *
     * @return \criteo\api\marketingsolutions\preview\Model\PointOfInterestV1[]|null
     */
    public function getPointsOfInterest()
    {
        return $this->container['points_of_interest'];
    }

    /**
     * Sets points_of_interest
     *
     * @param \criteo\api\marketingsolutions\preview\Model\PointOfInterestV1[]|null $points_of_interest points_of_interest
     *
     * @return self
     */
    public function setPointsOfInterest($points_of_interest)
    {


        $this->container['points_of_interest'] = $points_of_interest;

        return $this;
    }

    /**
     * Gets geo_divisions
     *
     * @return \criteo\api\marketingsolutions\preview\Model\GeoDivisionV1[]|null
     */
    public function getGeoDivisions()
    {
        return $this->container['geo_divisions'];
    }

    /**
     * Sets geo_divisions
     *
     * @param \criteo\api\marketingsolutions\preview\Model\GeoDivisionV1[]|null $geo_divisions geo_divisions
     *
     * @return self
     */
    public function setGeoDivisions($geo_divisions)
    {


        $this->container['geo_divisions'] = $geo_divisions;

        return $this;
    }

    /**
     * Gets radius_in_km
     *
     * @return int|null
     */
    public function getRadiusInKm()
    {
        return $this->container['radius_in_km'];
    }

    /**
     * Sets radius_in_km
     *
     * @param int|null $radius_in_km radius_in_km
     *
     * @return self
     */
    public function setRadiusInKm($radius_in_km)
    {
        $this->container['radius_in_km'] = $radius_in_km;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


