<?php
/**
 * CampaignApi
 * PHP version 7.3
 *
 * @category Class
 * @package  criteo\api\marketingsolutions\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Criteo API
 *
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: Preview
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace criteo\api\marketingsolutions\preview\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use criteo\api\marketingsolutions\preview\ApiException;
use criteo\api\marketingsolutions\preview\Configuration;
use criteo\api\marketingsolutions\preview\HeaderSelector;
use criteo\api\marketingsolutions\preview\ObjectSerializer;

/**
 * CampaignApi Class Doc Comment
 *
 * @category Class
 * @package  criteo\api\marketingsolutions\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CampaignApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createAdSet
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CreateAdSetRequest $create_ad_set_request the ad sets to create (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ResponseReadAdSet
     */
    public function createAdSet($create_ad_set_request = null)
    {
        list($response) = $this->createAdSetWithHttpInfo($create_ad_set_request);
        return $response;
    }

    /**
     * Operation createAdSetWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CreateAdSetRequest $create_ad_set_request the ad sets to create (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ResponseReadAdSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAdSetWithHttpInfo($create_ad_set_request = null)
    {
        $request = $this->createAdSetRequest($create_ad_set_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\criteo\api\marketingsolutions\preview\Model\ResponseReadAdSet' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ResponseReadAdSet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ResponseReadAdSet';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ResponseReadAdSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAdSetAsync
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CreateAdSetRequest $create_ad_set_request the ad sets to create (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAdSetAsync($create_ad_set_request = null)
    {
        return $this->createAdSetAsyncWithHttpInfo($create_ad_set_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAdSetAsyncWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CreateAdSetRequest $create_ad_set_request the ad sets to create (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAdSetAsyncWithHttpInfo($create_ad_set_request = null)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ResponseReadAdSet';
        $request = $this->createAdSetRequest($create_ad_set_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAdSet'
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CreateAdSetRequest $create_ad_set_request the ad sets to create (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAdSetRequest($create_ad_set_request = null)
    {

        $resourcePath = '/preview/marketing-solutions/ad-sets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($create_ad_set_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_ad_set_request));
            } else {
                $httpBody = $create_ad_set_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCampaign
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CreateCampaignRequest $create_campaign_request create_campaign_request (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\CampaignResponse
     */
    public function createCampaign($create_campaign_request = null)
    {
        list($response) = $this->createCampaignWithHttpInfo($create_campaign_request);
        return $response;
    }

    /**
     * Operation createCampaignWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CreateCampaignRequest $create_campaign_request (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\CampaignResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCampaignWithHttpInfo($create_campaign_request = null)
    {
        $request = $this->createCampaignRequest($create_campaign_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\criteo\api\marketingsolutions\preview\Model\CampaignResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\CampaignResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\CampaignResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\CampaignResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCampaignAsync
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CreateCampaignRequest $create_campaign_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCampaignAsync($create_campaign_request = null)
    {
        return $this->createCampaignAsyncWithHttpInfo($create_campaign_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCampaignAsyncWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CreateCampaignRequest $create_campaign_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCampaignAsyncWithHttpInfo($create_campaign_request = null)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\CampaignResponse';
        $request = $this->createCampaignRequest($create_campaign_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCampaign'
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CreateCampaignRequest $create_campaign_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCampaignRequest($create_campaign_request = null)
    {

        $resourcePath = '/preview/marketing-solutions/campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($create_campaign_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_campaign_request));
            } else {
                $httpBody = $create_campaign_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAdvertiserBundleRules
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function deleteAdvertiserBundleRules($advertiser_id, $api_request_of_targeting_entity = null)
    {
        list($response) = $this->deleteAdvertiserBundleRulesWithHttpInfo($advertiser_id, $api_request_of_targeting_entity);
        return $response;
    }

    /**
     * Operation deleteAdvertiserBundleRulesWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAdvertiserBundleRulesWithHttpInfo($advertiser_id, $api_request_of_targeting_entity = null)
    {
        $request = $this->deleteAdvertiserBundleRulesRequest($advertiser_id, $api_request_of_targeting_entity);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAdvertiserBundleRulesAsync
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAdvertiserBundleRulesAsync($advertiser_id, $api_request_of_targeting_entity = null)
    {
        return $this->deleteAdvertiserBundleRulesAsyncWithHttpInfo($advertiser_id, $api_request_of_targeting_entity)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAdvertiserBundleRulesAsyncWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAdvertiserBundleRulesAsyncWithHttpInfo($advertiser_id, $api_request_of_targeting_entity = null)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->deleteAdvertiserBundleRulesRequest($advertiser_id, $api_request_of_targeting_entity);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAdvertiserBundleRules'
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAdvertiserBundleRulesRequest($advertiser_id, $api_request_of_targeting_entity = null)
    {
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling deleteAdvertiserBundleRules'
            );
        }

        $resourcePath = '/preview/advertisers/{advertiserId}/targeting/bundle-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiserId' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($api_request_of_targeting_entity)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($api_request_of_targeting_entity));
            } else {
                $httpBody = $api_request_of_targeting_entity;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAdvertiserDomainRules
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function deleteAdvertiserDomainRules($advertiser_id, $api_request_of_targeting_entity = null)
    {
        list($response) = $this->deleteAdvertiserDomainRulesWithHttpInfo($advertiser_id, $api_request_of_targeting_entity);
        return $response;
    }

    /**
     * Operation deleteAdvertiserDomainRulesWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAdvertiserDomainRulesWithHttpInfo($advertiser_id, $api_request_of_targeting_entity = null)
    {
        $request = $this->deleteAdvertiserDomainRulesRequest($advertiser_id, $api_request_of_targeting_entity);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAdvertiserDomainRulesAsync
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAdvertiserDomainRulesAsync($advertiser_id, $api_request_of_targeting_entity = null)
    {
        return $this->deleteAdvertiserDomainRulesAsyncWithHttpInfo($advertiser_id, $api_request_of_targeting_entity)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAdvertiserDomainRulesAsyncWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAdvertiserDomainRulesAsyncWithHttpInfo($advertiser_id, $api_request_of_targeting_entity = null)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->deleteAdvertiserDomainRulesRequest($advertiser_id, $api_request_of_targeting_entity);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAdvertiserDomainRules'
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAdvertiserDomainRulesRequest($advertiser_id, $api_request_of_targeting_entity = null)
    {
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling deleteAdvertiserDomainRules'
            );
        }

        $resourcePath = '/preview/advertisers/{advertiserId}/targeting/domain-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiserId' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($api_request_of_targeting_entity)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($api_request_of_targeting_entity));
            } else {
                $httpBody = $api_request_of_targeting_entity;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCampaignBundleRules
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function deleteCampaignBundleRules($campaign_id, $api_request_of_targeting_entity = null)
    {
        list($response) = $this->deleteCampaignBundleRulesWithHttpInfo($campaign_id, $api_request_of_targeting_entity);
        return $response;
    }

    /**
     * Operation deleteCampaignBundleRulesWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCampaignBundleRulesWithHttpInfo($campaign_id, $api_request_of_targeting_entity = null)
    {
        $request = $this->deleteCampaignBundleRulesRequest($campaign_id, $api_request_of_targeting_entity);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCampaignBundleRulesAsync
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCampaignBundleRulesAsync($campaign_id, $api_request_of_targeting_entity = null)
    {
        return $this->deleteCampaignBundleRulesAsyncWithHttpInfo($campaign_id, $api_request_of_targeting_entity)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCampaignBundleRulesAsyncWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCampaignBundleRulesAsyncWithHttpInfo($campaign_id, $api_request_of_targeting_entity = null)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->deleteCampaignBundleRulesRequest($campaign_id, $api_request_of_targeting_entity);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCampaignBundleRules'
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCampaignBundleRulesRequest($campaign_id, $api_request_of_targeting_entity = null)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling deleteCampaignBundleRules'
            );
        }

        $resourcePath = '/preview/campaigns/{campaignId}/targeting/bundle-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($api_request_of_targeting_entity)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($api_request_of_targeting_entity));
            } else {
                $httpBody = $api_request_of_targeting_entity;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCampaignDomainRules
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function deleteCampaignDomainRules($campaign_id, $api_request_of_targeting_entity = null)
    {
        list($response) = $this->deleteCampaignDomainRulesWithHttpInfo($campaign_id, $api_request_of_targeting_entity);
        return $response;
    }

    /**
     * Operation deleteCampaignDomainRulesWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCampaignDomainRulesWithHttpInfo($campaign_id, $api_request_of_targeting_entity = null)
    {
        $request = $this->deleteCampaignDomainRulesRequest($campaign_id, $api_request_of_targeting_entity);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCampaignDomainRulesAsync
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCampaignDomainRulesAsync($campaign_id, $api_request_of_targeting_entity = null)
    {
        return $this->deleteCampaignDomainRulesAsyncWithHttpInfo($campaign_id, $api_request_of_targeting_entity)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCampaignDomainRulesAsyncWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCampaignDomainRulesAsyncWithHttpInfo($campaign_id, $api_request_of_targeting_entity = null)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->deleteCampaignDomainRulesRequest($campaign_id, $api_request_of_targeting_entity);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCampaignDomainRules'
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to delete from the list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCampaignDomainRulesRequest($campaign_id, $api_request_of_targeting_entity = null)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling deleteCampaignDomainRules'
            );
        }

        $resourcePath = '/preview/campaigns/{campaignId}/targeting/domain-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($api_request_of_targeting_entity)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($api_request_of_targeting_entity));
            } else {
                $httpBody = $api_request_of_targeting_entity;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOCIbrandSafetyRule
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOCIbrandSafetyRule($target_type, $target_id)
    {
        $this->deleteOCIbrandSafetyRuleWithHttpInfo($target_type, $target_id);
    }

    /**
     * Operation deleteOCIbrandSafetyRuleWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOCIbrandSafetyRuleWithHttpInfo($target_type, $target_id)
    {
        $request = $this->deleteOCIbrandSafetyRuleRequest($target_type, $target_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOCIbrandSafetyRuleAsync
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOCIbrandSafetyRuleAsync($target_type, $target_id)
    {
        return $this->deleteOCIbrandSafetyRuleAsyncWithHttpInfo($target_type, $target_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOCIbrandSafetyRuleAsyncWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOCIbrandSafetyRuleAsyncWithHttpInfo($target_type, $target_id)
    {
        $returnType = '';
        $request = $this->deleteOCIbrandSafetyRuleRequest($target_type, $target_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOCIbrandSafetyRule'
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteOCIbrandSafetyRuleRequest($target_type, $target_id)
    {
        // verify the required parameter 'target_type' is set
        if ($target_type === null || (is_array($target_type) && count($target_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_type when calling deleteOCIbrandSafetyRule'
            );
        }
        // verify the required parameter 'target_id' is set
        if ($target_id === null || (is_array($target_id) && count($target_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_id when calling deleteOCIbrandSafetyRule'
            );
        }
        if ($target_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$target_id" when calling CampaignApi.deleteOCIbrandSafetyRule, must be bigger than or equal to 1.');
        }


        $resourcePath = '/preview/brand-safety/oci';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($target_type !== null) {
            if('form' === 'form' && is_array($target_type)) {
                foreach($target_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['target-type'] = $target_type;
            }
        }
        // query params
        if ($target_id !== null) {
            if('form' === 'form' && is_array($target_id)) {
                foreach($target_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['target-id'] = $target_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOCItargetingRule
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOCItargetingRule($target_type, $target_id)
    {
        $this->deleteOCItargetingRuleWithHttpInfo($target_type, $target_id);
    }

    /**
     * Operation deleteOCItargetingRuleWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOCItargetingRuleWithHttpInfo($target_type, $target_id)
    {
        $request = $this->deleteOCItargetingRuleRequest($target_type, $target_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOCItargetingRuleAsync
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOCItargetingRuleAsync($target_type, $target_id)
    {
        return $this->deleteOCItargetingRuleAsyncWithHttpInfo($target_type, $target_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOCItargetingRuleAsyncWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOCItargetingRuleAsyncWithHttpInfo($target_type, $target_id)
    {
        $returnType = '';
        $request = $this->deleteOCItargetingRuleRequest($target_type, $target_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOCItargetingRule'
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteOCItargetingRuleRequest($target_type, $target_id)
    {
        // verify the required parameter 'target_type' is set
        if ($target_type === null || (is_array($target_type) && count($target_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_type when calling deleteOCItargetingRule'
            );
        }
        // verify the required parameter 'target_id' is set
        if ($target_id === null || (is_array($target_id) && count($target_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_id when calling deleteOCItargetingRule'
            );
        }
        if ($target_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$target_id" when calling CampaignApi.deleteOCItargetingRule, must be bigger than or equal to 1.');
        }


        $resourcePath = '/preview/targeting/oci';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($target_type !== null) {
            if('form' === 'form' && is_array($target_type)) {
                foreach($target_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['target-type'] = $target_type;
            }
        }
        // query params
        if ($target_id !== null) {
            if('form' === 'form' && is_array($target_id)) {
                foreach($target_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['target-id'] = $target_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdSet
     *
     * @param  string $ad_set_id Id of the ad set (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ResponseReadAdSet
     */
    public function getAdSet($ad_set_id)
    {
        list($response) = $this->getAdSetWithHttpInfo($ad_set_id);
        return $response;
    }

    /**
     * Operation getAdSetWithHttpInfo
     *
     * @param  string $ad_set_id Id of the ad set (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ResponseReadAdSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdSetWithHttpInfo($ad_set_id)
    {
        $request = $this->getAdSetRequest($ad_set_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ResponseReadAdSet' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ResponseReadAdSet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ResponseReadAdSet';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ResponseReadAdSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdSetAsync
     *
     * @param  string $ad_set_id Id of the ad set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdSetAsync($ad_set_id)
    {
        return $this->getAdSetAsyncWithHttpInfo($ad_set_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdSetAsyncWithHttpInfo
     *
     * @param  string $ad_set_id Id of the ad set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdSetAsyncWithHttpInfo($ad_set_id)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ResponseReadAdSet';
        $request = $this->getAdSetRequest($ad_set_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdSet'
     *
     * @param  string $ad_set_id Id of the ad set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdSetRequest($ad_set_id)
    {
        // verify the required parameter 'ad_set_id' is set
        if ($ad_set_id === null || (is_array($ad_set_id) && count($ad_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ad_set_id when calling getAdSet'
            );
        }

        $resourcePath = '/preview/marketing-solutions/ad-sets/{adSetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ad_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'adSetId' . '}',
                ObjectSerializer::toPathValue($ad_set_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdvertiserBundleRules
     *
     * @param  int $advertiser_id The advertiser id (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function getAdvertiserBundleRules($advertiser_id)
    {
        list($response) = $this->getAdvertiserBundleRulesWithHttpInfo($advertiser_id);
        return $response;
    }

    /**
     * Operation getAdvertiserBundleRulesWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdvertiserBundleRulesWithHttpInfo($advertiser_id)
    {
        $request = $this->getAdvertiserBundleRulesRequest($advertiser_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdvertiserBundleRulesAsync
     *
     * @param  int $advertiser_id The advertiser id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdvertiserBundleRulesAsync($advertiser_id)
    {
        return $this->getAdvertiserBundleRulesAsyncWithHttpInfo($advertiser_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdvertiserBundleRulesAsyncWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdvertiserBundleRulesAsyncWithHttpInfo($advertiser_id)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->getAdvertiserBundleRulesRequest($advertiser_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdvertiserBundleRules'
     *
     * @param  int $advertiser_id The advertiser id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdvertiserBundleRulesRequest($advertiser_id)
    {
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling getAdvertiserBundleRules'
            );
        }

        $resourcePath = '/preview/advertisers/{advertiserId}/targeting/bundle-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiserId' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdvertiserDomainRules
     *
     * @param  int $advertiser_id The advertiser id (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function getAdvertiserDomainRules($advertiser_id)
    {
        list($response) = $this->getAdvertiserDomainRulesWithHttpInfo($advertiser_id);
        return $response;
    }

    /**
     * Operation getAdvertiserDomainRulesWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdvertiserDomainRulesWithHttpInfo($advertiser_id)
    {
        $request = $this->getAdvertiserDomainRulesRequest($advertiser_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdvertiserDomainRulesAsync
     *
     * @param  int $advertiser_id The advertiser id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdvertiserDomainRulesAsync($advertiser_id)
    {
        return $this->getAdvertiserDomainRulesAsyncWithHttpInfo($advertiser_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdvertiserDomainRulesAsyncWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdvertiserDomainRulesAsyncWithHttpInfo($advertiser_id)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->getAdvertiserDomainRulesRequest($advertiser_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdvertiserDomainRules'
     *
     * @param  int $advertiser_id The advertiser id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdvertiserDomainRulesRequest($advertiser_id)
    {
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling getAdvertiserDomainRules'
            );
        }

        $resourcePath = '/preview/advertisers/{advertiserId}/targeting/domain-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiserId' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaign
     *
     * @param  string $campaign_id Id of the campaign (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\CampaignResponse
     */
    public function getCampaign($campaign_id)
    {
        list($response) = $this->getCampaignWithHttpInfo($campaign_id);
        return $response;
    }

    /**
     * Operation getCampaignWithHttpInfo
     *
     * @param  string $campaign_id Id of the campaign (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\CampaignResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignWithHttpInfo($campaign_id)
    {
        $request = $this->getCampaignRequest($campaign_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\CampaignResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\CampaignResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\CampaignResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\CampaignResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignAsync
     *
     * @param  string $campaign_id Id of the campaign (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignAsync($campaign_id)
    {
        return $this->getCampaignAsyncWithHttpInfo($campaign_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignAsyncWithHttpInfo
     *
     * @param  string $campaign_id Id of the campaign (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignAsyncWithHttpInfo($campaign_id)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\CampaignResponse';
        $request = $this->getCampaignRequest($campaign_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaign'
     *
     * @param  string $campaign_id Id of the campaign (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignRequest($campaign_id)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling getCampaign'
            );
        }

        $resourcePath = '/preview/marketing-solutions/campaigns/{campaign-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign-id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignBundleRules
     *
     * @param  int $campaign_id The campaign id (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function getCampaignBundleRules($campaign_id)
    {
        list($response) = $this->getCampaignBundleRulesWithHttpInfo($campaign_id);
        return $response;
    }

    /**
     * Operation getCampaignBundleRulesWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignBundleRulesWithHttpInfo($campaign_id)
    {
        $request = $this->getCampaignBundleRulesRequest($campaign_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignBundleRulesAsync
     *
     * @param  int $campaign_id The campaign id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignBundleRulesAsync($campaign_id)
    {
        return $this->getCampaignBundleRulesAsyncWithHttpInfo($campaign_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignBundleRulesAsyncWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignBundleRulesAsyncWithHttpInfo($campaign_id)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->getCampaignBundleRulesRequest($campaign_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignBundleRules'
     *
     * @param  int $campaign_id The campaign id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignBundleRulesRequest($campaign_id)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling getCampaignBundleRules'
            );
        }

        $resourcePath = '/preview/campaigns/{campaignId}/targeting/bundle-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignDomainRules
     *
     * @param  int $campaign_id The campaign id (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function getCampaignDomainRules($campaign_id)
    {
        list($response) = $this->getCampaignDomainRulesWithHttpInfo($campaign_id);
        return $response;
    }

    /**
     * Operation getCampaignDomainRulesWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignDomainRulesWithHttpInfo($campaign_id)
    {
        $request = $this->getCampaignDomainRulesRequest($campaign_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignDomainRulesAsync
     *
     * @param  int $campaign_id The campaign id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignDomainRulesAsync($campaign_id)
    {
        return $this->getCampaignDomainRulesAsyncWithHttpInfo($campaign_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignDomainRulesAsyncWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignDomainRulesAsyncWithHttpInfo($campaign_id)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->getCampaignDomainRulesRequest($campaign_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignDomainRules'
     *
     * @param  int $campaign_id The campaign id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignDomainRulesRequest($campaign_id)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling getCampaignDomainRules'
            );
        }

        $resourcePath = '/preview/campaigns/{campaignId}/targeting/domain-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCategoryBidList
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\AdSetCategoryBidListResponse
     */
    public function getCategoryBidList($ad_set_id)
    {
        list($response) = $this->getCategoryBidListWithHttpInfo($ad_set_id);
        return $response;
    }

    /**
     * Operation getCategoryBidListWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\AdSetCategoryBidListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCategoryBidListWithHttpInfo($ad_set_id)
    {
        $request = $this->getCategoryBidListRequest($ad_set_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\AdSetCategoryBidListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\AdSetCategoryBidListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\AdSetCategoryBidListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\AdSetCategoryBidListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCategoryBidListAsync
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCategoryBidListAsync($ad_set_id)
    {
        return $this->getCategoryBidListAsyncWithHttpInfo($ad_set_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCategoryBidListAsyncWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCategoryBidListAsyncWithHttpInfo($ad_set_id)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\AdSetCategoryBidListResponse';
        $request = $this->getCategoryBidListRequest($ad_set_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCategoryBidList'
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCategoryBidListRequest($ad_set_id)
    {
        // verify the required parameter 'ad_set_id' is set
        if ($ad_set_id === null || (is_array($ad_set_id) && count($ad_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ad_set_id when calling getCategoryBidList'
            );
        }

        $resourcePath = '/preview/marketing-solutions/ad-sets/{ad-set-id}/category-bids';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ad_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ad-set-id' . '}',
                ObjectSerializer::toPathValue($ad_set_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDisplayMultipliers
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\AdSetDisplayMultiplierListResponse
     */
    public function getDisplayMultipliers($ad_set_id)
    {
        list($response) = $this->getDisplayMultipliersWithHttpInfo($ad_set_id);
        return $response;
    }

    /**
     * Operation getDisplayMultipliersWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\AdSetDisplayMultiplierListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDisplayMultipliersWithHttpInfo($ad_set_id)
    {
        $request = $this->getDisplayMultipliersRequest($ad_set_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\AdSetDisplayMultiplierListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\AdSetDisplayMultiplierListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\AdSetDisplayMultiplierListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\AdSetDisplayMultiplierListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDisplayMultipliersAsync
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDisplayMultipliersAsync($ad_set_id)
    {
        return $this->getDisplayMultipliersAsyncWithHttpInfo($ad_set_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDisplayMultipliersAsyncWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDisplayMultipliersAsyncWithHttpInfo($ad_set_id)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\AdSetDisplayMultiplierListResponse';
        $request = $this->getDisplayMultipliersRequest($ad_set_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDisplayMultipliers'
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDisplayMultipliersRequest($ad_set_id)
    {
        // verify the required parameter 'ad_set_id' is set
        if ($ad_set_id === null || (is_array($ad_set_id) && count($ad_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ad_set_id when calling getDisplayMultipliers'
            );
        }

        $resourcePath = '/preview/marketing-solutions/ad-sets/{ad-set-id}/display-multipliers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ad_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ad-set-id' . '}',
                ObjectSerializer::toPathValue($ad_set_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOCIbrandSafetyRule
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse
     */
    public function getOCIbrandSafetyRule($target_type, $target_id)
    {
        list($response) = $this->getOCIbrandSafetyRuleWithHttpInfo($target_type, $target_id);
        return $response;
    }

    /**
     * Operation getOCIbrandSafetyRuleWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOCIbrandSafetyRuleWithHttpInfo($target_type, $target_id)
    {
        $request = $this->getOCIbrandSafetyRuleRequest($target_type, $target_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOCIbrandSafetyRuleAsync
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOCIbrandSafetyRuleAsync($target_type, $target_id)
    {
        return $this->getOCIbrandSafetyRuleAsyncWithHttpInfo($target_type, $target_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOCIbrandSafetyRuleAsyncWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOCIbrandSafetyRuleAsyncWithHttpInfo($target_type, $target_id)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse';
        $request = $this->getOCIbrandSafetyRuleRequest($target_type, $target_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOCIbrandSafetyRule'
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOCIbrandSafetyRuleRequest($target_type, $target_id)
    {
        // verify the required parameter 'target_type' is set
        if ($target_type === null || (is_array($target_type) && count($target_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_type when calling getOCIbrandSafetyRule'
            );
        }
        // verify the required parameter 'target_id' is set
        if ($target_id === null || (is_array($target_id) && count($target_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_id when calling getOCIbrandSafetyRule'
            );
        }
        if ($target_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$target_id" when calling CampaignApi.getOCIbrandSafetyRule, must be bigger than or equal to 1.');
        }


        $resourcePath = '/preview/brand-safety/oci';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($target_type !== null) {
            if('form' === 'form' && is_array($target_type)) {
                foreach($target_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['target-type'] = $target_type;
            }
        }
        // query params
        if ($target_id !== null) {
            if('form' === 'form' && is_array($target_id)) {
                foreach($target_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['target-id'] = $target_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOCItargetingRule
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse
     */
    public function getOCItargetingRule($target_type, $target_id)
    {
        list($response) = $this->getOCItargetingRuleWithHttpInfo($target_type, $target_id);
        return $response;
    }

    /**
     * Operation getOCItargetingRuleWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOCItargetingRuleWithHttpInfo($target_type, $target_id)
    {
        $request = $this->getOCItargetingRuleRequest($target_type, $target_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOCItargetingRuleAsync
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOCItargetingRuleAsync($target_type, $target_id)
    {
        return $this->getOCItargetingRuleAsyncWithHttpInfo($target_type, $target_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOCItargetingRuleAsyncWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOCItargetingRuleAsyncWithHttpInfo($target_type, $target_id)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse';
        $request = $this->getOCItargetingRuleRequest($target_type, $target_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOCItargetingRule'
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\TargetType $target_type Defines a target for a rule. (required)
     * @param  int $target_id Unique target identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOCItargetingRuleRequest($target_type, $target_id)
    {
        // verify the required parameter 'target_type' is set
        if ($target_type === null || (is_array($target_type) && count($target_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_type when calling getOCItargetingRule'
            );
        }
        // verify the required parameter 'target_id' is set
        if ($target_id === null || (is_array($target_id) && count($target_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_id when calling getOCItargetingRule'
            );
        }
        if ($target_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$target_id" when calling CampaignApi.getOCItargetingRule, must be bigger than or equal to 1.');
        }


        $resourcePath = '/preview/targeting/oci';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($target_type !== null) {
            if('form' === 'form' && is_array($target_type)) {
                foreach($target_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['target-type'] = $target_type;
            }
        }
        // query params
        if ($target_id !== null) {
            if('form' === 'form' && is_array($target_id)) {
                foreach($target_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['target-id'] = $target_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchAdSets
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsPatchAdSet $requests_patch_ad_set List of adsets to patch. (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ResponseAdSetId
     */
    public function patchAdSets($requests_patch_ad_set = null)
    {
        list($response) = $this->patchAdSetsWithHttpInfo($requests_patch_ad_set);
        return $response;
    }

    /**
     * Operation patchAdSetsWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsPatchAdSet $requests_patch_ad_set List of adsets to patch. (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ResponseAdSetId, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchAdSetsWithHttpInfo($requests_patch_ad_set = null)
    {
        $request = $this->patchAdSetsRequest($requests_patch_ad_set);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ResponseAdSetId' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ResponseAdSetId', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ResponseAdSetId';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ResponseAdSetId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchAdSetsAsync
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsPatchAdSet $requests_patch_ad_set List of adsets to patch. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchAdSetsAsync($requests_patch_ad_set = null)
    {
        return $this->patchAdSetsAsyncWithHttpInfo($requests_patch_ad_set)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchAdSetsAsyncWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsPatchAdSet $requests_patch_ad_set List of adsets to patch. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchAdSetsAsyncWithHttpInfo($requests_patch_ad_set = null)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ResponseAdSetId';
        $request = $this->patchAdSetsRequest($requests_patch_ad_set);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchAdSets'
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsPatchAdSet $requests_patch_ad_set List of adsets to patch. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchAdSetsRequest($requests_patch_ad_set = null)
    {

        $resourcePath = '/preview/marketing-solutions/ad-sets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($requests_patch_ad_set)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($requests_patch_ad_set));
            } else {
                $httpBody = $requests_patch_ad_set;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchCampaigns
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchCampaignListRequest $patch_campaign_list_request List of campaigns to patch. (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\PatchResultCampaignListResponse
     */
    public function patchCampaigns($patch_campaign_list_request = null)
    {
        list($response) = $this->patchCampaignsWithHttpInfo($patch_campaign_list_request);
        return $response;
    }

    /**
     * Operation patchCampaignsWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchCampaignListRequest $patch_campaign_list_request List of campaigns to patch. (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\PatchResultCampaignListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchCampaignsWithHttpInfo($patch_campaign_list_request = null)
    {
        $request = $this->patchCampaignsRequest($patch_campaign_list_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\PatchResultCampaignListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\PatchResultCampaignListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\PatchResultCampaignListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\PatchResultCampaignListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchCampaignsAsync
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchCampaignListRequest $patch_campaign_list_request List of campaigns to patch. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchCampaignsAsync($patch_campaign_list_request = null)
    {
        return $this->patchCampaignsAsyncWithHttpInfo($patch_campaign_list_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchCampaignsAsyncWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchCampaignListRequest $patch_campaign_list_request List of campaigns to patch. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchCampaignsAsyncWithHttpInfo($patch_campaign_list_request = null)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\PatchResultCampaignListResponse';
        $request = $this->patchCampaignsRequest($patch_campaign_list_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchCampaigns'
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchCampaignListRequest $patch_campaign_list_request List of campaigns to patch. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchCampaignsRequest($patch_campaign_list_request = null)
    {

        $resourcePath = '/preview/marketing-solutions/campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($patch_campaign_list_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($patch_campaign_list_request));
            } else {
                $httpBody = $patch_campaign_list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchCategoryBidList
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchAdSetCategoryBidListRequest $patch_ad_set_category_bid_list_request patch_ad_set_category_bid_list_request (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\PatchAdSetCategoryBidResultListResponse
     */
    public function patchCategoryBidList($ad_set_id, $patch_ad_set_category_bid_list_request = null)
    {
        list($response) = $this->patchCategoryBidListWithHttpInfo($ad_set_id, $patch_ad_set_category_bid_list_request);
        return $response;
    }

    /**
     * Operation patchCategoryBidListWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchAdSetCategoryBidListRequest $patch_ad_set_category_bid_list_request (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\PatchAdSetCategoryBidResultListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchCategoryBidListWithHttpInfo($ad_set_id, $patch_ad_set_category_bid_list_request = null)
    {
        $request = $this->patchCategoryBidListRequest($ad_set_id, $patch_ad_set_category_bid_list_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\PatchAdSetCategoryBidResultListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\PatchAdSetCategoryBidResultListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\PatchAdSetCategoryBidResultListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\PatchAdSetCategoryBidResultListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchCategoryBidListAsync
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchAdSetCategoryBidListRequest $patch_ad_set_category_bid_list_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchCategoryBidListAsync($ad_set_id, $patch_ad_set_category_bid_list_request = null)
    {
        return $this->patchCategoryBidListAsyncWithHttpInfo($ad_set_id, $patch_ad_set_category_bid_list_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchCategoryBidListAsyncWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchAdSetCategoryBidListRequest $patch_ad_set_category_bid_list_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchCategoryBidListAsyncWithHttpInfo($ad_set_id, $patch_ad_set_category_bid_list_request = null)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\PatchAdSetCategoryBidResultListResponse';
        $request = $this->patchCategoryBidListRequest($ad_set_id, $patch_ad_set_category_bid_list_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchCategoryBidList'
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchAdSetCategoryBidListRequest $patch_ad_set_category_bid_list_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchCategoryBidListRequest($ad_set_id, $patch_ad_set_category_bid_list_request = null)
    {
        // verify the required parameter 'ad_set_id' is set
        if ($ad_set_id === null || (is_array($ad_set_id) && count($ad_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ad_set_id when calling patchCategoryBidList'
            );
        }

        $resourcePath = '/preview/marketing-solutions/ad-sets/{ad-set-id}/category-bids';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ad_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ad-set-id' . '}',
                ObjectSerializer::toPathValue($ad_set_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($patch_ad_set_category_bid_list_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($patch_ad_set_category_bid_list_request));
            } else {
                $httpBody = $patch_ad_set_category_bid_list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchDisplayMultipliers
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchAdSetDisplayMultiplierListRequest $patch_ad_set_display_multiplier_list_request patch_ad_set_display_multiplier_list_request (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\PatchAdSetDisplayMultiplierResultListResponse
     */
    public function patchDisplayMultipliers($ad_set_id, $patch_ad_set_display_multiplier_list_request = null)
    {
        list($response) = $this->patchDisplayMultipliersWithHttpInfo($ad_set_id, $patch_ad_set_display_multiplier_list_request);
        return $response;
    }

    /**
     * Operation patchDisplayMultipliersWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchAdSetDisplayMultiplierListRequest $patch_ad_set_display_multiplier_list_request (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\PatchAdSetDisplayMultiplierResultListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchDisplayMultipliersWithHttpInfo($ad_set_id, $patch_ad_set_display_multiplier_list_request = null)
    {
        $request = $this->patchDisplayMultipliersRequest($ad_set_id, $patch_ad_set_display_multiplier_list_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\PatchAdSetDisplayMultiplierResultListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\PatchAdSetDisplayMultiplierResultListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\PatchAdSetDisplayMultiplierResultListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\PatchAdSetDisplayMultiplierResultListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchDisplayMultipliersAsync
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchAdSetDisplayMultiplierListRequest $patch_ad_set_display_multiplier_list_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchDisplayMultipliersAsync($ad_set_id, $patch_ad_set_display_multiplier_list_request = null)
    {
        return $this->patchDisplayMultipliersAsyncWithHttpInfo($ad_set_id, $patch_ad_set_display_multiplier_list_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchDisplayMultipliersAsyncWithHttpInfo
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchAdSetDisplayMultiplierListRequest $patch_ad_set_display_multiplier_list_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchDisplayMultipliersAsyncWithHttpInfo($ad_set_id, $patch_ad_set_display_multiplier_list_request = null)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\PatchAdSetDisplayMultiplierResultListResponse';
        $request = $this->patchDisplayMultipliersRequest($ad_set_id, $patch_ad_set_display_multiplier_list_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchDisplayMultipliers'
     *
     * @param  string $ad_set_id Id of the Ad Set (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\PatchAdSetDisplayMultiplierListRequest $patch_ad_set_display_multiplier_list_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchDisplayMultipliersRequest($ad_set_id, $patch_ad_set_display_multiplier_list_request = null)
    {
        // verify the required parameter 'ad_set_id' is set
        if ($ad_set_id === null || (is_array($ad_set_id) && count($ad_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ad_set_id when calling patchDisplayMultipliers'
            );
        }

        $resourcePath = '/preview/marketing-solutions/ad-sets/{ad-set-id}/display-multipliers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ad_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ad-set-id' . '}',
                ObjectSerializer::toPathValue($ad_set_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($patch_ad_set_display_multiplier_list_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($patch_ad_set_display_multiplier_list_request));
            } else {
                $httpBody = $patch_ad_set_display_multiplier_list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAdvertiserBundleRules
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function postAdvertiserBundleRules($advertiser_id, $api_request_of_targeting_entity = null)
    {
        list($response) = $this->postAdvertiserBundleRulesWithHttpInfo($advertiser_id, $api_request_of_targeting_entity);
        return $response;
    }

    /**
     * Operation postAdvertiserBundleRulesWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAdvertiserBundleRulesWithHttpInfo($advertiser_id, $api_request_of_targeting_entity = null)
    {
        $request = $this->postAdvertiserBundleRulesRequest($advertiser_id, $api_request_of_targeting_entity);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postAdvertiserBundleRulesAsync
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAdvertiserBundleRulesAsync($advertiser_id, $api_request_of_targeting_entity = null)
    {
        return $this->postAdvertiserBundleRulesAsyncWithHttpInfo($advertiser_id, $api_request_of_targeting_entity)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAdvertiserBundleRulesAsyncWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAdvertiserBundleRulesAsyncWithHttpInfo($advertiser_id, $api_request_of_targeting_entity = null)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->postAdvertiserBundleRulesRequest($advertiser_id, $api_request_of_targeting_entity);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAdvertiserBundleRules'
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postAdvertiserBundleRulesRequest($advertiser_id, $api_request_of_targeting_entity = null)
    {
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling postAdvertiserBundleRules'
            );
        }

        $resourcePath = '/preview/advertisers/{advertiserId}/targeting/bundle-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiserId' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($api_request_of_targeting_entity)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($api_request_of_targeting_entity));
            } else {
                $httpBody = $api_request_of_targeting_entity;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAdvertiserDomainRules
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity
     */
    public function postAdvertiserDomainRules($advertiser_id, $api_request_of_targeting_entity = null)
    {
        list($response) = $this->postAdvertiserDomainRulesWithHttpInfo($advertiser_id, $api_request_of_targeting_entity);
        return $response;
    }

    /**
     * Operation postAdvertiserDomainRulesWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAdvertiserDomainRulesWithHttpInfo($advertiser_id, $api_request_of_targeting_entity = null)
    {
        $request = $this->postAdvertiserDomainRulesRequest($advertiser_id, $api_request_of_targeting_entity);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postAdvertiserDomainRulesAsync
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAdvertiserDomainRulesAsync($advertiser_id, $api_request_of_targeting_entity = null)
    {
        return $this->postAdvertiserDomainRulesAsyncWithHttpInfo($advertiser_id, $api_request_of_targeting_entity)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAdvertiserDomainRulesAsyncWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAdvertiserDomainRulesAsyncWithHttpInfo($advertiser_id, $api_request_of_targeting_entity = null)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->postAdvertiserDomainRulesRequest($advertiser_id, $api_request_of_targeting_entity);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAdvertiserDomainRules'
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postAdvertiserDomainRulesRequest($advertiser_id, $api_request_of_targeting_entity = null)
    {
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling postAdvertiserDomainRules'
            );
        }

        $resourcePath = '/preview/advertisers/{advertiserId}/targeting/domain-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiserId' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($api_request_of_targeting_entity)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($api_request_of_targeting_entity));
            } else {
                $httpBody = $api_request_of_targeting_entity;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCampaignBundleRules
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function postCampaignBundleRules($campaign_id, $api_request_of_targeting_entity = null)
    {
        list($response) = $this->postCampaignBundleRulesWithHttpInfo($campaign_id, $api_request_of_targeting_entity);
        return $response;
    }

    /**
     * Operation postCampaignBundleRulesWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCampaignBundleRulesWithHttpInfo($campaign_id, $api_request_of_targeting_entity = null)
    {
        $request = $this->postCampaignBundleRulesRequest($campaign_id, $api_request_of_targeting_entity);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCampaignBundleRulesAsync
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCampaignBundleRulesAsync($campaign_id, $api_request_of_targeting_entity = null)
    {
        return $this->postCampaignBundleRulesAsyncWithHttpInfo($campaign_id, $api_request_of_targeting_entity)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCampaignBundleRulesAsyncWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCampaignBundleRulesAsyncWithHttpInfo($campaign_id, $api_request_of_targeting_entity = null)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->postCampaignBundleRulesRequest($campaign_id, $api_request_of_targeting_entity);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCampaignBundleRules'
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCampaignBundleRulesRequest($campaign_id, $api_request_of_targeting_entity = null)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling postCampaignBundleRules'
            );
        }

        $resourcePath = '/preview/campaigns/{campaignId}/targeting/bundle-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($api_request_of_targeting_entity)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($api_request_of_targeting_entity));
            } else {
                $httpBody = $api_request_of_targeting_entity;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCampaignDomainRules
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function postCampaignDomainRules($campaign_id, $api_request_of_targeting_entity = null)
    {
        list($response) = $this->postCampaignDomainRulesWithHttpInfo($campaign_id, $api_request_of_targeting_entity);
        return $response;
    }

    /**
     * Operation postCampaignDomainRulesWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCampaignDomainRulesWithHttpInfo($campaign_id, $api_request_of_targeting_entity = null)
    {
        $request = $this->postCampaignDomainRulesRequest($campaign_id, $api_request_of_targeting_entity);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCampaignDomainRulesAsync
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCampaignDomainRulesAsync($campaign_id, $api_request_of_targeting_entity = null)
    {
        return $this->postCampaignDomainRulesAsyncWithHttpInfo($campaign_id, $api_request_of_targeting_entity)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCampaignDomainRulesAsyncWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCampaignDomainRulesAsyncWithHttpInfo($campaign_id, $api_request_of_targeting_entity = null)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->postCampaignDomainRulesRequest($campaign_id, $api_request_of_targeting_entity);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCampaignDomainRules'
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Description of the targeting rule to setup (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCampaignDomainRulesRequest($campaign_id, $api_request_of_targeting_entity = null)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling postCampaignDomainRules'
            );
        }

        $resourcePath = '/preview/campaigns/{campaignId}/targeting/domain-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($api_request_of_targeting_entity)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($api_request_of_targeting_entity));
            } else {
                $httpBody = $api_request_of_targeting_entity;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putAdvertiserBundleRules
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function putAdvertiserBundleRules($advertiser_id, $api_request_of_targeting_entity = null)
    {
        list($response) = $this->putAdvertiserBundleRulesWithHttpInfo($advertiser_id, $api_request_of_targeting_entity);
        return $response;
    }

    /**
     * Operation putAdvertiserBundleRulesWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putAdvertiserBundleRulesWithHttpInfo($advertiser_id, $api_request_of_targeting_entity = null)
    {
        $request = $this->putAdvertiserBundleRulesRequest($advertiser_id, $api_request_of_targeting_entity);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putAdvertiserBundleRulesAsync
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putAdvertiserBundleRulesAsync($advertiser_id, $api_request_of_targeting_entity = null)
    {
        return $this->putAdvertiserBundleRulesAsyncWithHttpInfo($advertiser_id, $api_request_of_targeting_entity)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putAdvertiserBundleRulesAsyncWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putAdvertiserBundleRulesAsyncWithHttpInfo($advertiser_id, $api_request_of_targeting_entity = null)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->putAdvertiserBundleRulesRequest($advertiser_id, $api_request_of_targeting_entity);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putAdvertiserBundleRules'
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putAdvertiserBundleRulesRequest($advertiser_id, $api_request_of_targeting_entity = null)
    {
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling putAdvertiserBundleRules'
            );
        }

        $resourcePath = '/preview/advertisers/{advertiserId}/targeting/bundle-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiserId' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($api_request_of_targeting_entity)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($api_request_of_targeting_entity));
            } else {
                $httpBody = $api_request_of_targeting_entity;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putAdvertiserDomainRules
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function putAdvertiserDomainRules($advertiser_id, $api_request_of_targeting_entity = null)
    {
        list($response) = $this->putAdvertiserDomainRulesWithHttpInfo($advertiser_id, $api_request_of_targeting_entity);
        return $response;
    }

    /**
     * Operation putAdvertiserDomainRulesWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putAdvertiserDomainRulesWithHttpInfo($advertiser_id, $api_request_of_targeting_entity = null)
    {
        $request = $this->putAdvertiserDomainRulesRequest($advertiser_id, $api_request_of_targeting_entity);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putAdvertiserDomainRulesAsync
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putAdvertiserDomainRulesAsync($advertiser_id, $api_request_of_targeting_entity = null)
    {
        return $this->putAdvertiserDomainRulesAsyncWithHttpInfo($advertiser_id, $api_request_of_targeting_entity)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putAdvertiserDomainRulesAsyncWithHttpInfo
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putAdvertiserDomainRulesAsyncWithHttpInfo($advertiser_id, $api_request_of_targeting_entity = null)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->putAdvertiserDomainRulesRequest($advertiser_id, $api_request_of_targeting_entity);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putAdvertiserDomainRules'
     *
     * @param  int $advertiser_id The advertiser id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putAdvertiserDomainRulesRequest($advertiser_id, $api_request_of_targeting_entity = null)
    {
        // verify the required parameter 'advertiser_id' is set
        if ($advertiser_id === null || (is_array($advertiser_id) && count($advertiser_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advertiser_id when calling putAdvertiserDomainRules'
            );
        }

        $resourcePath = '/preview/advertisers/{advertiserId}/targeting/domain-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($advertiser_id !== null) {
            $resourcePath = str_replace(
                '{' . 'advertiserId' . '}',
                ObjectSerializer::toPathValue($advertiser_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($api_request_of_targeting_entity)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($api_request_of_targeting_entity));
            } else {
                $httpBody = $api_request_of_targeting_entity;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putCampaignBundleRules
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function putCampaignBundleRules($campaign_id, $api_request_of_targeting_entity = null)
    {
        list($response) = $this->putCampaignBundleRulesWithHttpInfo($campaign_id, $api_request_of_targeting_entity);
        return $response;
    }

    /**
     * Operation putCampaignBundleRulesWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCampaignBundleRulesWithHttpInfo($campaign_id, $api_request_of_targeting_entity = null)
    {
        $request = $this->putCampaignBundleRulesRequest($campaign_id, $api_request_of_targeting_entity);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putCampaignBundleRulesAsync
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCampaignBundleRulesAsync($campaign_id, $api_request_of_targeting_entity = null)
    {
        return $this->putCampaignBundleRulesAsyncWithHttpInfo($campaign_id, $api_request_of_targeting_entity)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putCampaignBundleRulesAsyncWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCampaignBundleRulesAsyncWithHttpInfo($campaign_id, $api_request_of_targeting_entity = null)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->putCampaignBundleRulesRequest($campaign_id, $api_request_of_targeting_entity);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putCampaignBundleRules'
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putCampaignBundleRulesRequest($campaign_id, $api_request_of_targeting_entity = null)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling putCampaignBundleRules'
            );
        }

        $resourcePath = '/preview/campaigns/{campaignId}/targeting/bundle-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($api_request_of_targeting_entity)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($api_request_of_targeting_entity));
            } else {
                $httpBody = $api_request_of_targeting_entity;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putCampaignDomainRules
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse
     */
    public function putCampaignDomainRules($campaign_id, $api_request_of_targeting_entity = null)
    {
        list($response) = $this->putCampaignDomainRulesWithHttpInfo($campaign_id, $api_request_of_targeting_entity);
        return $response;
    }

    /**
     * Operation putCampaignDomainRulesWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse|\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCampaignDomainRulesWithHttpInfo($campaign_id, $api_request_of_targeting_entity = null)
    {
        $request = $this->putCampaignDomainRulesRequest($campaign_id, $api_request_of_targeting_entity);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putCampaignDomainRulesAsync
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCampaignDomainRulesAsync($campaign_id, $api_request_of_targeting_entity = null)
    {
        return $this->putCampaignDomainRulesAsyncWithHttpInfo($campaign_id, $api_request_of_targeting_entity)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putCampaignDomainRulesAsyncWithHttpInfo
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putCampaignDomainRulesAsyncWithHttpInfo($campaign_id, $api_request_of_targeting_entity = null)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ApiResponseOfTargetingEntity';
        $request = $this->putCampaignDomainRulesRequest($campaign_id, $api_request_of_targeting_entity);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putCampaignDomainRules'
     *
     * @param  int $campaign_id The campaign id (required)
     * @param  \criteo\api\marketingsolutions\preview\Model\ApiRequestOfTargetingEntity $api_request_of_targeting_entity Contains the list of items to add to the existing list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putCampaignDomainRulesRequest($campaign_id, $api_request_of_targeting_entity = null)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling putCampaignDomainRules'
            );
        }

        $resourcePath = '/preview/campaigns/{campaignId}/targeting/domain-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($api_request_of_targeting_entity)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($api_request_of_targeting_entity));
            } else {
                $httpBody = $api_request_of_targeting_entity;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchAdSets
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestAdSetSearch $request_ad_set_search request_ad_set_search (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ResponsesReadAdSet
     */
    public function searchAdSets($request_ad_set_search = null)
    {
        list($response) = $this->searchAdSetsWithHttpInfo($request_ad_set_search);
        return $response;
    }

    /**
     * Operation searchAdSetsWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestAdSetSearch $request_ad_set_search (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ResponsesReadAdSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchAdSetsWithHttpInfo($request_ad_set_search = null)
    {
        $request = $this->searchAdSetsRequest($request_ad_set_search);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ResponsesReadAdSet' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ResponsesReadAdSet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ResponsesReadAdSet';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ResponsesReadAdSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchAdSetsAsync
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestAdSetSearch $request_ad_set_search (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAdSetsAsync($request_ad_set_search = null)
    {
        return $this->searchAdSetsAsyncWithHttpInfo($request_ad_set_search)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchAdSetsAsyncWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestAdSetSearch $request_ad_set_search (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAdSetsAsyncWithHttpInfo($request_ad_set_search = null)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ResponsesReadAdSet';
        $request = $this->searchAdSetsRequest($request_ad_set_search);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchAdSets'
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestAdSetSearch $request_ad_set_search (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchAdSetsRequest($request_ad_set_search = null)
    {

        $resourcePath = '/preview/marketing-solutions/ad-sets/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($request_ad_set_search)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($request_ad_set_search));
            } else {
                $httpBody = $request_ad_set_search;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchCampaigns
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CampaignSearchRequest $campaign_search_request filters on campaigns (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\CampaignListResponse
     */
    public function searchCampaigns($campaign_search_request = null)
    {
        list($response) = $this->searchCampaignsWithHttpInfo($campaign_search_request);
        return $response;
    }

    /**
     * Operation searchCampaignsWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CampaignSearchRequest $campaign_search_request filters on campaigns (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\CampaignListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchCampaignsWithHttpInfo($campaign_search_request = null)
    {
        $request = $this->searchCampaignsRequest($campaign_search_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\CampaignListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\CampaignListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\CampaignListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\CampaignListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchCampaignsAsync
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CampaignSearchRequest $campaign_search_request filters on campaigns (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchCampaignsAsync($campaign_search_request = null)
    {
        return $this->searchCampaignsAsyncWithHttpInfo($campaign_search_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchCampaignsAsyncWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CampaignSearchRequest $campaign_search_request filters on campaigns (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchCampaignsAsyncWithHttpInfo($campaign_search_request = null)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\CampaignListResponse';
        $request = $this->searchCampaignsRequest($campaign_search_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchCampaigns'
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\CampaignSearchRequest $campaign_search_request filters on campaigns (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchCampaignsRequest($campaign_search_request = null)
    {

        $resourcePath = '/preview/marketing-solutions/campaigns/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($campaign_search_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($campaign_search_request));
            } else {
                $httpBody = $campaign_search_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation startAdSets
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to start (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId
     */
    public function startAdSets($requests_ad_set_id = null)
    {
        list($response) = $this->startAdSetsWithHttpInfo($requests_ad_set_id);
        return $response;
    }

    /**
     * Operation startAdSetsWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to start (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId, HTTP status code, HTTP response headers (array of strings)
     */
    public function startAdSetsWithHttpInfo($requests_ad_set_id = null)
    {
        $request = $this->startAdSetsRequest($requests_ad_set_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation startAdSetsAsync
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to start (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startAdSetsAsync($requests_ad_set_id = null)
    {
        return $this->startAdSetsAsyncWithHttpInfo($requests_ad_set_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startAdSetsAsyncWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to start (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startAdSetsAsyncWithHttpInfo($requests_ad_set_id = null)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId';
        $request = $this->startAdSetsRequest($requests_ad_set_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'startAdSets'
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to start (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function startAdSetsRequest($requests_ad_set_id = null)
    {

        $resourcePath = '/preview/marketing-solutions/ad-sets/start';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($requests_ad_set_id)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($requests_ad_set_id));
            } else {
                $httpBody = $requests_ad_set_id;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stopAdSets
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to stop (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId
     */
    public function stopAdSets($requests_ad_set_id = null)
    {
        list($response) = $this->stopAdSetsWithHttpInfo($requests_ad_set_id);
        return $response;
    }

    /**
     * Operation stopAdSetsWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to stop (optional)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId, HTTP status code, HTTP response headers (array of strings)
     */
    public function stopAdSetsWithHttpInfo($requests_ad_set_id = null)
    {
        $request = $this->stopAdSetsRequest($requests_ad_set_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stopAdSetsAsync
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to stop (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stopAdSetsAsync($requests_ad_set_id = null)
    {
        return $this->stopAdSetsAsyncWithHttpInfo($requests_ad_set_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stopAdSetsAsyncWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to stop (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stopAdSetsAsyncWithHttpInfo($requests_ad_set_id = null)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\ResponsesAdSetId';
        $request = $this->stopAdSetsRequest($requests_ad_set_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stopAdSets'
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\RequestsAdSetId $requests_ad_set_id All the ad sets to stop (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function stopAdSetsRequest($requests_ad_set_id = null)
    {

        $resourcePath = '/preview/marketing-solutions/ad-sets/stop';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($requests_ad_set_id)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($requests_ad_set_id));
            } else {
                $httpBody = $requests_ad_set_id;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation upsertOCIbrandSafetyRule
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\OciBrandSafetyRule $oci_brand_safety_rule OCI brand-safety rule input (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse
     */
    public function upsertOCIbrandSafetyRule($oci_brand_safety_rule)
    {
        list($response) = $this->upsertOCIbrandSafetyRuleWithHttpInfo($oci_brand_safety_rule);
        return $response;
    }

    /**
     * Operation upsertOCIbrandSafetyRuleWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\OciBrandSafetyRule $oci_brand_safety_rule OCI brand-safety rule input (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse|\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function upsertOCIbrandSafetyRuleWithHttpInfo($oci_brand_safety_rule)
    {
        $request = $this->upsertOCIbrandSafetyRuleRequest($oci_brand_safety_rule);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation upsertOCIbrandSafetyRuleAsync
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\OciBrandSafetyRule $oci_brand_safety_rule OCI brand-safety rule input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsertOCIbrandSafetyRuleAsync($oci_brand_safety_rule)
    {
        return $this->upsertOCIbrandSafetyRuleAsyncWithHttpInfo($oci_brand_safety_rule)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation upsertOCIbrandSafetyRuleAsyncWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\OciBrandSafetyRule $oci_brand_safety_rule OCI brand-safety rule input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsertOCIbrandSafetyRuleAsyncWithHttpInfo($oci_brand_safety_rule)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\OciBrandSafetyResponse';
        $request = $this->upsertOCIbrandSafetyRuleRequest($oci_brand_safety_rule);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'upsertOCIbrandSafetyRule'
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\OciBrandSafetyRule $oci_brand_safety_rule OCI brand-safety rule input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function upsertOCIbrandSafetyRuleRequest($oci_brand_safety_rule)
    {
        // verify the required parameter 'oci_brand_safety_rule' is set
        if ($oci_brand_safety_rule === null || (is_array($oci_brand_safety_rule) && count($oci_brand_safety_rule) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $oci_brand_safety_rule when calling upsertOCIbrandSafetyRule'
            );
        }

        $resourcePath = '/preview/brand-safety/oci';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($oci_brand_safety_rule)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($oci_brand_safety_rule));
            } else {
                $httpBody = $oci_brand_safety_rule;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation upsertOCItargetingRule
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\OciTargetingRule $oci_targeting_rule OCI targeting rule input (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse
     */
    public function upsertOCItargetingRule($oci_targeting_rule)
    {
        list($response) = $this->upsertOCItargetingRuleWithHttpInfo($oci_targeting_rule);
        return $response;
    }

    /**
     * Operation upsertOCItargetingRuleWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\OciTargetingRule $oci_targeting_rule OCI targeting rule input (required)
     *
     * @throws \criteo\api\marketingsolutions\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse|\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function upsertOCItargetingRuleWithHttpInfo($oci_targeting_rule)
    {
        $request = $this->upsertOCItargetingRuleRequest($oci_targeting_rule);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation upsertOCItargetingRuleAsync
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\OciTargetingRule $oci_targeting_rule OCI targeting rule input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsertOCItargetingRuleAsync($oci_targeting_rule)
    {
        return $this->upsertOCItargetingRuleAsyncWithHttpInfo($oci_targeting_rule)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation upsertOCItargetingRuleAsyncWithHttpInfo
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\OciTargetingRule $oci_targeting_rule OCI targeting rule input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsertOCItargetingRuleAsyncWithHttpInfo($oci_targeting_rule)
    {
        $returnType = '\criteo\api\marketingsolutions\preview\Model\OciTargetingResponse';
        $request = $this->upsertOCItargetingRuleRequest($oci_targeting_rule);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'upsertOCItargetingRule'
     *
     * @param  \criteo\api\marketingsolutions\preview\Model\OciTargetingRule $oci_targeting_rule OCI targeting rule input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function upsertOCItargetingRuleRequest($oci_targeting_rule)
    {
        // verify the required parameter 'oci_targeting_rule' is set
        if ($oci_targeting_rule === null || (is_array($oci_targeting_rule) && count($oci_targeting_rule) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $oci_targeting_rule when calling upsertOCItargetingRule'
            );
        }

        $resourcePath = '/preview/targeting/oci';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($oci_targeting_rule)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($oci_targeting_rule));
            } else {
                $httpBody = $oci_targeting_rule;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
